{"ast":null,"code":"var _jsxFileName = \"E:\\\\ReactJs\\\\Assignment Test\\\\Assignment_Test\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport './App.css';\nimport NewContact from './components/Products/NewContact';\nimport ContactList from './components/Products/ContactList';\nfunction App() {\n  const [loadedContacts, setLoadedContacts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const addProductHandler = async () => {\n    try {\n      setIsLoading(true);\n      let hasError = false;\n      const response = await fetch('https://randomuser.me/api');\n      if (!response.ok) {\n        hasError = true;\n      }\n      const responseData = await response.json(); // storing the response data from the response received.\n\n      // console.log(\"Response Data =>\",responseData)\n      // console.log(\"Response Data Email =>\",responseData.results[0].email)\n      // console.log(\"Response Data NameArray =>\",responseData.results[0].name)\n      // console.log(\"Response Data Name =>\",responseData.results[0].name.title+\" \"+responseData.results[0].name.first+\" \"+responseData.results[0].name.last)\n\n      const newContact = {\n        title: responseData.results[0].name.title + \" \" + responseData.results[0].name.first + \" \" + responseData.results[0].name.last,\n        email: responseData.results[0].email\n      };\n      if (hasError) {\n        throw new Error(responseData.message);\n      }\n      setLoadedContacts(prevContacts => {\n        return prevContacts.concat({\n          ...newContact\n        });\n      });\n      setLoadedContacts(prevContacts => {\n        return prevContacts.concat({});\n      });\n      // setLoadedContacts([newContact]) // If we need to just one contact at a time.\n      setIsLoading(false);\n    } catch (error) {\n      alert(error.message || 'Something went wrong!');\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NewContact, {\n    onAddProduct: addProductHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"loader\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 23\n    }\n  }, \"Loading...\"), !isLoading && /*#__PURE__*/React.createElement(ContactList, {\n    contactInfo: loadedContacts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 24\n    }\n  })));\n}\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","Header","NewContact","ContactList","App","loadedContacts","setLoadedContacts","isLoading","setIsLoading","addProductHandler","hasError","response","fetch","ok","responseData","json","newContact","title","results","name","first","last","email","Error","message","prevContacts","concat","error","alert","createElement","Fragment","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onAddProduct","className","contactInfo"],"sources":["E:/ReactJs/Assignment Test/Assignment_Test/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport Header from './components/Header/Header';\r\nimport './App.css';\r\nimport NewContact from './components/Products/NewContact';\r\nimport ContactList from './components/Products/ContactList';\r\n\r\nfunction App() {\r\n  const [loadedContacts, setLoadedContacts] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const addProductHandler = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      let hasError = false;\r\n      const response = await fetch('https://randomuser.me/api');\r\n\r\n      if (!response.ok) {\r\n        hasError = true;\r\n      }\r\n\r\n      const responseData = await response.json(); // storing the response data from the response received.\r\n      \r\n      // console.log(\"Response Data =>\",responseData)\r\n      // console.log(\"Response Data Email =>\",responseData.results[0].email)\r\n      // console.log(\"Response Data NameArray =>\",responseData.results[0].name)\r\n      // console.log(\"Response Data Name =>\",responseData.results[0].name.title+\" \"+responseData.results[0].name.first+\" \"+responseData.results[0].name.last)\r\n\r\n      const newContact = {\r\n          title: responseData.results[0].name.title+\" \"+responseData.results[0].name.first+\" \"+responseData.results[0].name.last,\r\n          email: responseData.results[0].email \r\n        };\r\n\r\n      if (hasError) {\r\n        throw new Error(responseData.message);\r\n      }\r\n      setLoadedContacts(prevContacts => {\r\n        return prevContacts.concat({\r\n           ...newContact\r\n        });\r\n      });\r\n      setLoadedContacts(prevContacts => {\r\n        return prevContacts.concat({\r\n\r\n        });\r\n      });\r\n      // setLoadedContacts([newContact]) // If we need to just one contact at a time.\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      alert(error.message || 'Something went wrong!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <main>\r\n        <NewContact onAddProduct={addProductHandler} />\r\n        {isLoading && <p className=\"loader\">Loading...</p>}\r\n        {!isLoading && <ContactList contactInfo={loadedContacts} />}\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}